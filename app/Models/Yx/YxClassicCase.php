<?php

namespace App\Models\Yx;

use Illuminate\Database\Eloquent\Model;
use Wanjia\Common\Database\ExModel;

class YxClassicCase extends Model
{
    use ExModel;

    protected $table = 'yx_classic_case';


    public function business()
    {
        return $this->belongsTo(YxBusiness::class, 'business_id');
    }

    public function funcs()
    {
        return $this->belongsToMany(YxFunc::class, 'yx_classic_case_func', 'case_id', 'func_id');
    }

    public function purpose()
    {
        return $this->belongsTo(YxPurpose::class, 'purpose_id');
    }

    public function setCasesAttribute($cases)
    {
        $this->attributes['cases'] = empty($cases) ? '' : is_array($cases) ? collect($cases)->filter()->implode(',') : $cases;
    }

    public function setKeywordsAttribute($keywords)
    {
        $this->attributes['keywords'] = empty($keywords) ? '' : is_array($keywords) ? collect($keywords)->filter()->implode(',') : $keywords;
    }

    public function getQrcodeAttribute()
    {
        return uploads_url('yingxiao/'.md5('yingxiao:'.$this->url).'.png');
    }

    public function setBannerAttribute($banners)
    {
        if (is_array($banners)) {
            $this->attributes['banner'] = json_encode($banners);
        }
    }

    public function getBannerAttribute($banners)
    {
        return json_decode($banners, true);
    }

    /**
     * @param $case string
     * @return bool
     */
    public function can($case) {
        if (empty($this->cases)) {
            return false;
        }
        $cases = explode(',', $this->cases);
        return in_array($case, $cases);
    }

    protected static function boot()
    {
        static::deleted(function (YxClassicCase $case) {
            $case->funcs()->detach();
        });
        parent::boot(); // TODO: Change the autogenerated stub
    }

}
